//
// Copyright 2022 Anysphere, Inc.
// SPDX-License-Identifier: GPL-3.0-only
//

/*
daemon.proto defines the rpc between daemon and UI.
*/

syntax = "proto3";

import "google/protobuf/timestamp.proto";

package asphrdaemon;

service Daemon {
    rpc RegisterUser(RegisterUserRequest) returns (RegisterUserResponse) {}

    rpc GetFriendList(GetFriendListRequest) returns (GetFriendListResponse) {}

    rpc GenerateFriendKey(GenerateFriendKeyRequest) returns (GenerateFriendKeyResponse) {}

    rpc AddFriend(AddFriendRequest) returns (AddFriendResponse) {}

    rpc RemoveFriend(RemoveFriendRequest) returns (RemoveFriendResponse) {}

    rpc SendMessage(SendMessageRequest) returns (SendMessageResponse) {}

    rpc GetMessages(GetMessagesRequest) returns (GetMessagesResponse) {}

    rpc GetMessagesStreamed(GetMessagesRequest) returns (stream GetMessagesResponse) {}

    rpc GetOutboxMessages(GetOutboxMessagesRequest) returns (GetOutboxMessagesResponse) {}

    rpc GetSentMessages(GetSentMessagesRequest) returns (GetSentMessagesResponse) {}

    rpc MessageSeen(MessageSeenRequest) returns (MessageSeenResponse) {}

    // GetStatus returns the status of the daemon. Things like how long since the last send/receive cycle, etc.
    rpc GetStatus(GetStatusRequest) returns (GetStatusResponse) {}

    rpc GetLatency(GetLatencyRequest) returns (GetLatencyResponse) {}
    rpc ChangeLatency(ChangeLatencyRequest) returns (ChangeLatencyResponse) {}

    rpc Kill(KillRequest) returns (KillResponse) {}
}

message RegisterUserRequest {
    string name = 1;
    string beta_key = 2;
}

message RegisterUserResponse {}

message GetFriendListRequest {}

message FriendInfo {
    string name = 1;
    bool enabled = 2;
}

message GetFriendListResponse {
    repeated FriendInfo friend_infos = 1;
}

message GenerateFriendKeyRequest {
    string name = 1;
}

message GenerateFriendKeyResponse {
    string key = 1;
}

message AddFriendRequest {
    string name = 1;
    string key = 2;
}

message AddFriendResponse {}

message RemoveFriendRequest {
    string name = 1;
}

message RemoveFriendResponse {}

message SendMessageRequest {
    string name = 1;
    string message = 2;
}

message SendMessageResponse {}

message BaseMessage {
    // this ID is NOT the same as the ID in message.proto
    // in particular, this ID is guaranteed to be unique among ALL messages (on a given device), whereas the ID in message.proto
    // is only unique for each <sender, recipient> pair.
    // the format of this ID is something like (to|from):sender:sequence_number
    string id = 1;
    string message = 2;
}

message IncomingMessage {
    BaseMessage m = 1;
    string from = 2;
    google.protobuf.Timestamp received_timestamp = 3;
    bool seen = 4;
}

message OutgoingMessage {
    BaseMessage m = 1;
    string to = 2;
    google.protobuf.Timestamp written_timestamp = 3;
    bool delivered = 4;
}

message GetMessagesRequest {
    enum Filter {
        ALL = 0;
        NEW = 1;
    }
    Filter filter = 1;
}

message GetMessagesResponse {
    repeated IncomingMessage messages = 1;
}

message GetOutboxMessagesRequest {}

message GetOutboxMessagesResponse {
    repeated OutgoingMessage messages = 1;
}

message GetSentMessagesRequest {}

message GetSentMessagesResponse {
    repeated OutgoingMessage messages = 1;
}

message MessageSeenRequest {
    string id = 1;
}

message MessageSeenResponse {}

message GetStatusRequest {}

message GetStatusResponse {
    bool registered = 1;
    string release_hash = 2;
    int32 latency_seconds = 3;
}

message GetLatencyRequest {}
message GetLatencyResponse {
    int32 latency_seconds = 1;
}

message ChangeLatencyRequest {
    int32 latency_seconds = 1;
}

message ChangeLatencyResponse {}

message KillRequest {}
message KillResponse {}