/*******************************************************************************
 * CLI - A simple command line interface.
 * Copyright (C) 2016-2021 Daniele Pallastrelli
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#include "as_cli.hpp"

#include "inbox.hpp"
#include "root_menu.hpp"

using namespace cli;

using asphrdaemon::Daemon;

int main() {
  // setup cli

  Message message_to_send;
  // Friend friend_to_add;
  static Profile kProfile_;
  static Inbox kInbox_;

  // set up the unix socket
  auto socket_address = string("unix:///var/run/anysphere.sock");

  // connect to the anysphere daemon
  cout << "Client connecting to socket: " << socket_address << endl;
  auto channel =
      grpc::CreateChannel(socket_address, grpc::InsecureChannelCredentials());
  auto stub = Daemon::NewStub(channel);

  auto rootMenu = make_anysphere_menu();

  rootMenu->Insert(
      "message",
      [&](std::ostream& out, string friend_name, string message) {
        Message msg(message, friend_name, kProfile_.name_);
        msg.send(stub);

        out << "Message sent to " << friend_name << ": " << message << "\n";
      },
      StrCat("Open a text menu to message a friend.",
             "You can also use the command line interface with `message` to "
             "send messages.",
             "Interface `message ${friend} ${message}`"));

  auto messageMenu = make_unique<Menu>("message");
  messageMenu->Insert(
      "friend",
      [&](std::ostream& out, string friend_name) {
        out << "Send a message to friend: " << friend_name << " :)\n";

        message_to_send.to_ = friend_name;
        message_to_send.from_ = "me";
        if (message_to_send.complete()) {
          out << "Message sent to " << friend_name << ": "
              << message_to_send.msg_ << "\n";
          message_to_send.send(stub);
        } else {
          out << "Now type `write` with your message.\n";
          out << "Press Esv or type 'anysphere' to return to the menu.\n";
        }
      },
      "Open a text menu to message a friend.");
  messageMenu->Insert(
      "write",
      [&](std::ostream& out, string message) {
        out << "Send a message to friend: " << message << " :\n";

        message_to_send.msg_ = message;
        if (message_to_send.complete()) {
          out << "Message sent to " << message_to_send.to_ << ": "
              << message_to_send.msg_ << "\n";
          message_to_send.send(stub);
          out << "Type 'anysphere' to go to your main inbox.\n";
        } else {
          out << "Now type `friend:` with your friend name.\n";
        }
      },
      "Open a text menu to message a friend.");

  /* Register interface
   */
  rootMenu->Insert(
      "register",
      [&](std::ostream& out, string name) {
        Profile profile(name);
        kProfile_ = profile;
        profile.add(stub);

        out << "Profile registered: " << name << " :\n";
      },
      "Register a profile! Parameters: name, public_key, private_key");

  /* Inbox interface
   */
  auto inboxMenu = make_unique<Menu>("inbox");
  inboxMenu->Insert(
      "friend",
      [&](std::ostream& out, string friend_name) {
        out << StrCat("Showing (the last 15) messages from your friend ",
                      friend_name, "\n");

        out << "--------------------------------\n";
        kInbox_.update(stub, kProfile_.name_);
        auto messages = kInbox_.get_messages();

        for (const auto& [time, msg] : messages) {
          if (msg.from_ != friend_name) {
            continue;
          }
          auto time_str = absl::FormatTime(time, absl::UTCTimeZone());

          out << StrCat("(", time_str, ")", ": ", msg.from_, ": \n", msg.msg_,
                        "--------------------------------", "\n");
        }
        out << "Type 'anysphere' to go to your main inbox.\n ";
        // go to the main inbox.
      },
      "Show the messages from a friend");
  inboxMenu->Insert(
      "names",
      [](std::ostream& out) {
        out << "Showing all your friends:\n\n";
        // auto friends = read_friends_from_file();
        // for (const auto& friend_ : friends) {
        //   out << friend_["name"].get<string>() << "\n";
        // }
        // if (friends.empty()) {
        //   out << "You have no friends :(\n";
        // }
        // if (friends.size() == 1) {
        //   out << "YOU have 1 friend :)\n";
        // } else {
        //   out << StrCat("THERE YOUR ARE! YOU HAVE ", friends.size(),
        //                 " FRIENDS\n");
        // }

        out << "Type 'anysphere' to go to your main inbox.\n ";
      },
      "Show all your friends");

  /* Friends interface
    You can add friends with the command "add-friend ${friend_name} ${friend
    public key}"
    You can also open the add-friend menu with "friend"
  */
  auto friendsMenu = make_unique<Menu>("add-friend");
  friendsMenu->Insert(
      "init",
      [&](std::ostream& out, string friend_name) {
        Friend friend_(friend_name);

        auto status = friend_.generate_key(stub);

        if (!status.ok()) {
          // TODO(sualeh): mention soemthing about anysphere retrying auto later
          out << "We had some issue with the key generation. Please try again "
                 "in a little bit. ";
          return;
        }

        auto key = status.value();

        out << StrCat(
            "We initiated the process of adding your friend ", friend_name,
            ".\n\n Please give your friend the following key: \n", key, "\n\n",
            "You can finish adding your friend by typing `add-friend {friend "
            "name} {your friend's key}`\n");

        out << "Type 'anysphere' to go to your main inbox.\n ";
      },
      "Initiate the process of adding a friend to your friends list! Params: "
      "friend_name");
  friendsMenu->Insert(
      "add",
      [&](std::ostream& out, string friend_name, string key) {
        Friend friend_(friend_name);

        auto status = friend_.add(stub, key);

        if (!status.ok()) {
          out << "We had some issue with adding your friend. Please try again "
                 "in a little bit. ";
          return;
        }

        out << StrCat("We added your friend ", friend_name,
                      " to your friends list.\n\n",
                      "Type 'anysphere' to go to your main inbox.\n ");
      },
      "Add a friend to your friends list! Params: friend_name, friend_key");

  // Just add all the submenus to the root menu
  rootMenu->Insert(std::move(messageMenu));
  rootMenu->Insert(std::move(inboxMenu));
  rootMenu->Insert(std::move(friendsMenu));

  Cli cli(std::move(rootMenu));
  SetColor();

  // global exit action
  cli.ExitAction([](auto& out) {
    out << "Goodbye! We hope you are enjoying anysphere!\n";
  });

  MainScheduler scheduler;
  auto localSession = CliLocalTerminalSession(cli, scheduler, std::cout, 200);
  localSession.ExitAction([&scheduler](auto& out) {
    out << "Closing App...\n";
    scheduler.Stop();
  });

  scheduler.Run();

  return 0;
}
